package com.atlassian.jira.webtests.ztests.bulk;

import com.atlassian.jira.webtests.JIRAWebTest;

public abstract class BulkChangeIssues extends JIRAWebTest
{
    /**
     * This is the number of issues displayed in one result page of the issue navigator
     */
    protected static final int NUM_RESULTS_PER_PG = 50;

    protected static final String PROJECT_TEMP = "project_temp";
    //These are summarys for issues to be added
    protected static final String SUMMARY_ISSUE_ON_NEXT_PG = "this is on the next page";
    protected static final String SUMMARY_ISSUE_IN_PROJECT_TWO = "issue in project two";
    protected static final String SUMMARY_ISSUE_IN_PROJECT_TEMP = "issue in project temp";

    protected static final String LABEL_NO_ISSUE_FOUND = "No matching issues found";

    /**
     * Constant Error Strings caused from clicking 'Next' in the steps without
     * completing the required fields.
     */
    protected static final String ERROR_NEXT_CHOOSE_ISSUE = "You must select at least one issue to bulk edit.";
    protected static final String ERROR_NEXT_CHOOSE_OPERATION = "Please choose an operation from the list below.";
    protected static final String ERROR_NEXT_OPERATION_DETAILS = "You must select at least one bulk action to perform";

    protected static final String NOTE_MULTIPLE_PROJECTS = "This operation can be performed only on issues from ONE project.";
    protected static final String NOTE_NO_VERSIONS = "The project of the selected issue(s) does not have any versions.";
    protected static final String NOTE_NO_COMPONENTS = "The project of the selected issue(s) does not have any components.";
    protected static final String NOTE_NO_CUSTOM_FIELDS = "There are no available custom fields for the selected issues.";

    // name of the 'quicksearch' form
    protected static final String FORM_QUICK_SEARCH = "quicksearch";

    // Frequently used field names
    protected static final String FIELD_SEARCH_STRING = "searchString";

    protected static final String OPTION_VERSION_ONE = VERSION_NAME_ONE;
    protected static final String OPTION_VERSION_TWO = VERSION_NAME_TWO;
    protected static final String OPTION_COMPONENT_ONE = COMPONENT_NAME_ONE;

    protected static final String OPTION_UNASSIGNED = "Unassigned";

    protected static final String OPTION_PRIORITY_ONE = "Blocker";
    protected static final String OPTION_PRIORITY_TWO = "Critical";
    protected static final String OPTION_PRIORITY_THREE = "Major";
    protected static final String OPTION_PRIORITY_FOUR = "Minor";
    protected static final String OPTION_PRIORITY_FIVE = "Trivial";

    protected static final String TYPE_PRIORITY_ONE = "Blocker";
    protected static final String TYPE_PRIORITY_TWO = "Critical";
    protected static final String TYPE_PRIORITY_THREE = "Major";
    protected static final String TYPE_PRIORITY_FOUR = "Minor";
    protected static final String TYPE_PRIORITY_FIVE = "Trivial";

    protected static final String FIELDS_UPDATE_AUTO = "All field values will be retained";


    public BulkChangeIssues(String name)
    {
        super(name);
    }

    public void setUp()
    {
        super.setUp();
    }

    public void tearDown()
    {
        super.tearDown();
    }

    protected void bulkChangeSetup()
    {
        log("Bulk Change - Set Up: deleting ALL issues and adding projects, components, & versions");
        restoreData("TestBulkChangeSetup.xml");
    }

    /**
     * adds a new issue with the given 'summary'
     *
     * @param summary
     */
    protected String addIssue(String summary)
    {
        return addIssueViaRest(PROJECT_HOMOSAP, PROJECT_HOMOSAP_KEY, "Bug", summary, "Major", ADMIN_USERNAME, "test environment", "description for " + summary);
    }

    /**
     * adds new random issues ('numOfIssues' times)<br>
     * these issues are not 'known' types.
     *
     * @param numOfIssues
     */
    protected void addIssues(int numOfIssues)
    {
        for (int i = 0; i < numOfIssues; i++)
        {
            addIssueViaRest(PROJECT_HOMOSAP, PROJECT_HOMOSAP_KEY, "Bug", "random_" + numOfIssues, "Major", ADMIN_USERNAME, "test environment", "\"generated by loop\"");
        }
    }

    /**
     * adds new random issues ('numOfIssues' times)<br>
     * these issues are not 'known' types.
     *
     * @param numOfIssues
     */
    protected void addIssues(String prefix, int numOfIssues)
    {
        long start = System.currentTimeMillis();
        log("Creating " + numOfIssues + " issues ");
        for (int i = 0; i < numOfIssues; i++)
        {
            addIssueViaRest(PROJECT_HOMOSAP, PROJECT_HOMOSAP_KEY, "Bug", prefix + i, "Major", ADMIN_USERNAME, "test environment", "\"generated by loop with prefix\"");
        }
        log("Created " + numOfIssues + " issues in " + String.valueOf(System.currentTimeMillis() - start));
    }

    /**
     * adds a issue with the given summary in the given project
     */
    protected String addIssueInProject(String summary, String project, String projectKey)
    {
        return addIssueViaRest(project, projectKey, "Bug", summary, "Critical", ADMIN_USERNAME, "environment", "this issue is not in project " + project);
    }

    /**
     * Adds an issue until the issue navigator has a next page
     */
    protected void addCurrentPageLink()
    {
        displayAllIssues();
        while (!(getDialog().isLinkPresentWithText(LINK_NEXT_PG)))
        {
            addIssue("add current page link");
            displayAllIssues();
        }
    }

    /**
     * does a quick search with the given summary, and checks if the issue with the
     * summary exists (deleted or not). <br>
     * This only works if all issues have unique summary.<br>
     * A better approach would be to get the issue key and search for that.
     *
     * @param summary
     * @return (boolean) whether the issue with given summary is deleted
     */
    protected boolean checkIssueIsDeleted(String summary)
    {
        if (!(getDialog().hasForm(FORM_QUICK_SEARCH) && getDialog().hasFormParameterNamed(FIELD_SEARCH_STRING)))
        {
            login(ADMIN_USERNAME, ADMIN_PASSWORD);
        }
        setWorkingForm(FORM_QUICK_SEARCH);
        setFormElement(FIELD_SEARCH_STRING, summary);
        submit();

        return !getDialog().isLinkPresentWithText(summary);
    }

    /**
     * Error checking for clicking next without completing the step: Choose Issue
     */
    protected void bulkChangeNextWithoutFormCompletionStepChooseIssue()
    {
        clickOnNext();
        assertTextPresent("Errors");
        assertTextPresent(ERROR_NEXT_CHOOSE_ISSUE);
    }

    /**
     * Error checking for clicking next without completing the step: Choose Operation
     */
    protected void bulkChangeNextWithoutFormCompletionStepChooseOperation()
    {
        clickOnNext();
        assertTextPresent("Errors");
        assertTextPresent(ERROR_NEXT_CHOOSE_OPERATION);
    }

    /**
     * Error checking for clicking next without completing the step: Operation Details
     */
    protected void bulkChangeNextWithoutFormCompletionStepOperationDetails()
    {
        clickOnNext();
        assertTextPresent("Errors");
        assertTextPresent(ERROR_NEXT_OPERATION_DETAILS);
    }

    /**
     * Checks if the issue navigator displays the correct dynamic label
     * regarding the number of issues/results on display.<br>
     * Also checks if there is the link to bulk change all and bulk change
     * current if there is more than one page of issues/results
     *
     * @param page
     */
    protected void checkLabelForStepIssueNavigator(int page, int totalIssues)
    {
        int fromIssue, toIssue;

        fromIssue = ((page - 1) * NUM_RESULTS_PER_PG) + 1;

        if (totalIssues - fromIssue < NUM_RESULTS_PER_PG)
        {
            toIssue = totalIssues;
        }
        else
        {
            toIssue = (fromIssue + NUM_RESULTS_PER_PG - 1);
        }

        assertIssueNavigatorDisplaying(String.valueOf(fromIssue), String.valueOf(toIssue), String.valueOf(totalIssues));
        assertLinkPresentWithText("all " + totalIssues + " issue(s)");
        //NEED TO TEST THIS
        if (getDialog().isTextInResponse(LINK_NEXT_PG))
        {
            assertLinkPresent(LINK_BULK_CHANGE_CURR_PG);
        }
    }

    /**
     * checks that that dynamic label in Step Choose Operation is correct
     *
     * @param numOfSelectedIssues
     * @param numOfSelectedProjects
     */
    protected void checkLabelForStepChooseOperation(int numOfSelectedIssues, int numOfSelectedProjects)
    {
        checkSideMenuLabel(numOfSelectedIssues, numOfSelectedProjects);
        assertTextPresent("Choose the operation you wish to perform on the selected <strong>" + numOfSelectedIssues + "</strong> issue(s).");
    }

    /**
     * checks that that dynamic label in Step Operation Details is correct
     *
     * @param numOfSelectedIssues
     * @param numOfSelectedProjects
     */
    protected void checkLabelForStepOperationDetails(int numOfSelectedIssues, int numOfSelectedProjects)
    {
        checkSideMenuLabel(numOfSelectedIssues, numOfSelectedProjects);
        assertTextPresent("Choose the bulk action(s) you wish to perform on the selected <b>" + numOfSelectedIssues + "</b> issue(s).");
    }

    /**
     * checks that that dynamic label in Step Confirmation for Edit Operation is correct
     *
     * @param numOfSelectedIssues
     * @param numOfSelectedProjects
     */
    protected void checkLabelForStepConfirmationEdit(int numOfSelectedIssues, int numOfSelectedProjects)
    {
        checkSideMenuLabel(numOfSelectedIssues, numOfSelectedProjects);
        assertTextPresent("The above table summarises the changes you are about to make to the following <strong>" + numOfSelectedIssues + "</strong> issues. Do you wish to continue?");
    }

    /**
     * checks that that dynamic label in Step Confirmation for Delete Operation is correct
     *
     * @param numOfSelectedIssues
     * @param numOfSelectedProjects
     */
    protected void checkLabelForStepConfirmationDelete(int numOfSelectedIssues, int numOfSelectedProjects)
    {
        checkSideMenuLabel(numOfSelectedIssues, numOfSelectedProjects);
        assertTextPresent("Please confirm that you wish to delete the following <b>" + numOfSelectedIssues + "</b> issues.");
    }

    /**
     * Checks that the dynamic label in the side menu of all the steps in bulk change is correct
     *
     * @param numOfSelectedIssues
     * @param numOfSelectedProjects
     */
    protected void checkSideMenuLabel(int numOfSelectedIssues, int numOfSelectedProjects)
    {
        assertTextPresent("Selected <strong>" + numOfSelectedIssues + "</strong> issues from <strong>" + numOfSelectedProjects + "</strong> project(s)");
    }

    /**
     * Checks that issues with summary equal to the 'prefix' + i [0..max] are present
     *
     * @param prefix
     */
    protected void checkIssuesAreListed(String prefix, int max)
    {
        for (int i = 0; i < max; i++)
        {
            assertLinkPresentWithText(prefix + i);
        }
    }

    /**
     * Checks that issues with summary equal to the 'prefix' + i [0..max] are NOT present
     *
     * @param prefix
     */
    protected void checkIssuesAreNotListed(String prefix, int max)
    {
        for (int i = 0; i < max; i++)
        {
            assertLinkNotPresentWithText(prefix + i);
        }
    }

    /**
     * Checks the side menu links for whether they have the correct links
     * available or not, and also if it is for the correct step. <br>
     * This is for the step Choose Issues
     */
    protected void checkSideBarLinksInStepChooseIssues()
    {
        isStepChooseIssues();
        assertLinkNotPresentWithText(STEP_CHOOSE_ISSUES);
        assertLinkNotPresentWithText(STEP_CHOOSE_OPERATION);
        assertLinkNotPresentWithText(STEP_OPERATION_DETAILS);
        assertLinkNotPresentWithText(STEP_CONFIRMATION);
    }

    /**
     * Checks the side menu links for whether they have the correct links
     * available or not, and also if it is for the correct step. <br>
     * This is for the step Choose Operations
     */
    protected void checkSideBarLinksInStepChooseOperation()
    {
        isStepChooseOperation();
        assertLinkPresentWithText(STEP_CHOOSE_ISSUES);
        assertLinkNotPresentWithText(STEP_CHOOSE_OPERATION);
        assertLinkNotPresentWithText(STEP_OPERATION_DETAILS);
        assertLinkNotPresentWithText(STEP_CONFIRMATION);
    }

    /**
     * Checks the side menu links for whether they have the correct links
     * available or not, and also if it is for the correct step.<br>
     * This is for the step Operations Details
     */
    protected void checkSideBarLinksInStepOperationDetails()
    {
        isStepOperationDetails();
        assertLinkPresentWithText(STEP_CHOOSE_ISSUES);
        assertLinkPresentWithText(STEP_CHOOSE_OPERATION);
        assertLinkNotPresentWithText(STEP_OPERATION_DETAILS);
        assertLinkNotPresentWithText(STEP_CONFIRMATION);
    }

    /**
     * Checks the side menu links for whether they have the correct links
     * available or not, and also if it is for the correct step.
     * This is for the step Confirmation with operation as delete
     */
    protected void checkSideBarLinksInStepConfirmationForDeleteOp()
    {
        isStepConfirmation();
        assertLinkPresentWithText(STEP_CHOOSE_ISSUES);
        assertLinkPresentWithText(STEP_CHOOSE_OPERATION);
        //Step 3 available now as mail notification can be set
        assertLinkPresentWithText(STEP_OPERATION_DETAILS);
        assertLinkNotPresentWithText(STEP_CONFIRMATION);
    }

    /**
     * Checks the side menu links for whether they have the correct links
     * available or not, and also if it is for the correct step.<br>
     * This is for the step Confirmation with operation as edit
     */
    protected void checkSideBarLinksInStepConfirmationForEditOp()
    {
        isStepConfirmation();
        assertLinkPresentWithText(STEP_CHOOSE_ISSUES);
        assertLinkPresentWithText(STEP_CHOOSE_OPERATION);
        assertLinkPresentWithText(STEP_OPERATION_DETAILS);
        assertLinkNotPresentWithText(STEP_CONFIRMATION);
    }

    protected void checkMultipleProjectNote()
    {
        assertTextPresent(NOTE_MULTIPLE_PROJECTS);
        assertFormElementNotPresent(FIELD_FIX_VERSIONS);
        assertFormElementNotPresent(FIELD_VERSIONS);
        assertFormElementNotPresent(FIELD_COMPONENTS);
    }

    /**
     * Returns to Step Choose Issues using the side menu from the wizard
     * and checks that the link is correct
     */
    protected void checkLinkToStepChooseIssues()
    {
        clickLinkWithText(STEP_CHOOSE_ISSUES);
        isStepChooseIssues();
    }

    /**
     * Returns to Step Choose Operations using the side menu from the wizard
     * and checks that the link is correct
     */
    protected void checkLinkToStepChooseOperation()
    {
        clickLinkWithText(STEP_CHOOSE_OPERATION);
        isStepChooseOperation();
    }

    /**
     * Returns to Step Operation Details using the side menu from the wizard
     * and checks that the link is correct
     */
    protected void checkLinkToStepOperationDetails()
    {
        clickLinkWithText(STEP_OPERATION_DETAILS);
        isStepOperationDetails();
    }
}
